package swap

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/KyberNetwork/iZiSwap-SDK-go/msgpencode"
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *LimitOrderPoint) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 3 {
		err = msgp.ArrayError{Wanted: 3, Got: zb0001}
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "SellingX")
			return
		}
		z.SellingX = nil
	} else {
		{
			var zb0002 []byte
			zb0002, err = dc.ReadBytes(msgpencode.EncodeInt(z.SellingX))
			if err != nil {
				err = msgp.WrapError(err, "SellingX")
				return
			}
			z.SellingX = msgpencode.DecodeInt(zb0002)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "SellingY")
			return
		}
		z.SellingY = nil
	} else {
		{
			var zb0003 []byte
			zb0003, err = dc.ReadBytes(msgpencode.EncodeInt(z.SellingY))
			if err != nil {
				err = msgp.WrapError(err, "SellingY")
				return
			}
			z.SellingY = msgpencode.DecodeInt(zb0003)
		}
	}
	z.Point, err = dc.ReadInt()
	if err != nil {
		err = msgp.WrapError(err, "Point")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *LimitOrderPoint) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 3
	err = en.Append(0x93)
	if err != nil {
		return
	}
	if z.SellingX == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.SellingX))
		if err != nil {
			err = msgp.WrapError(err, "SellingX")
			return
		}
	}
	if z.SellingY == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.SellingY))
		if err != nil {
			err = msgp.WrapError(err, "SellingY")
			return
		}
	}
	err = en.WriteInt(z.Point)
	if err != nil {
		err = msgp.WrapError(err, "Point")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *LimitOrderPoint) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 3
	o = append(o, 0x93)
	if z.SellingX == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.SellingX))
	}
	if z.SellingY == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.SellingY))
	}
	o = msgp.AppendInt(o, z.Point)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *LimitOrderPoint) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 3 {
		err = msgp.ArrayError{Wanted: 3, Got: zb0001}
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.SellingX = nil
	} else {
		{
			var zb0002 []byte
			zb0002, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.SellingX))
			if err != nil {
				err = msgp.WrapError(err, "SellingX")
				return
			}
			z.SellingX = msgpencode.DecodeInt(zb0002)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.SellingY = nil
	} else {
		{
			var zb0003 []byte
			zb0003, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.SellingY))
			if err != nil {
				err = msgp.WrapError(err, "SellingY")
				return
			}
			z.SellingY = msgpencode.DecodeInt(zb0003)
		}
	}
	z.Point, bts, err = msgp.ReadIntBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Point")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *LimitOrderPoint) Msgsize() (s int) {
	s = 1
	if z.SellingX == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.SellingX))
	}
	if z.SellingY == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.SellingY))
	}
	s += msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *LiquidityPoint) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "LiqudityDelta")
			return
		}
		z.LiqudityDelta = nil
	} else {
		{
			var zb0002 []byte
			zb0002, err = dc.ReadBytes(msgpencode.EncodeInt(z.LiqudityDelta))
			if err != nil {
				err = msgp.WrapError(err, "LiqudityDelta")
				return
			}
			z.LiqudityDelta = msgpencode.DecodeInt(zb0002)
		}
	}
	z.Point, err = dc.ReadInt()
	if err != nil {
		err = msgp.WrapError(err, "Point")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *LiquidityPoint) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 2
	err = en.Append(0x92)
	if err != nil {
		return
	}
	if z.LiqudityDelta == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.LiqudityDelta))
		if err != nil {
			err = msgp.WrapError(err, "LiqudityDelta")
			return
		}
	}
	err = en.WriteInt(z.Point)
	if err != nil {
		err = msgp.WrapError(err, "Point")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *LiquidityPoint) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 2
	o = append(o, 0x92)
	if z.LiqudityDelta == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.LiqudityDelta))
	}
	o = msgp.AppendInt(o, z.Point)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *LiquidityPoint) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.LiqudityDelta = nil
	} else {
		{
			var zb0002 []byte
			zb0002, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.LiqudityDelta))
			if err != nil {
				err = msgp.WrapError(err, "LiqudityDelta")
				return
			}
			z.LiqudityDelta = msgpencode.DecodeInt(zb0002)
		}
	}
	z.Point, bts, err = msgp.ReadIntBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Point")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *LiquidityPoint) Msgsize() (s int) {
	s = 1
	if z.LiqudityDelta == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.LiqudityDelta))
	}
	s += msgp.IntSize
	return
}
